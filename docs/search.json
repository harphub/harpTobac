[{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://harphub.github.io/harpTobac/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://harphub.github.io/harpTobac/articles/tracking_model_OLR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Track OLR features","text":"article, show example tracking features outgoing longwave radiation field NWP model MEPS. going make use harpIO package load data ggplot2 package, together expansions harpVis package plot data.","code":"library(harpIO) #> Loading required package: harpCore #>  #> Attaching package: 'harpCore' #> The following object is masked from 'package:stats': #>  #>     filter library(harpVis) #> Loading required package: ggplot2 #> Loading required package: shiny library(harpTobac)"},{"path":"https://harphub.github.io/harpTobac/articles/tracking_model_OLR.html","id":"loading-the-data","dir":"Articles","previous_headings":"","what":"Loading the data","title":"Track OLR features","text":"First need load data using read_forecast() harpIO package. data downloaded open data Thredds server Norwegian Meteorological Institute. steps need go ensure read data properly. First ’ll add outgoing longwave parameter parameter definitions read_forecast() knows parameter extract. data also negative outgoing radiation multiply -1 set path template file(s) read, well information netcdf files. now can read data…","code":"my_params <- add_param_def(   \"olr\",    netcdf = new_netcdf_param(\"toa_outgoing_longwave_flux\"),    func = function(x) x * -1 ) url       <- \"https://thredds.met.no/thredds/dodsC/meps25epsarchive\" template  <- \"{YYYY}/{MM}/{DD}/{fcst_model}_sfc_{YYYY}{MM}{DD}T{HH}Z.ncml\" file_opts <- netcdf_opts(   z_var = \"top_of_atmosphere\", ref_time_var = \"forecast_reference_time\" ) olr <- read_forecast(   dttm             = 2024052700,   fcst_model       = \"meps_det\",   parameter        = \"olr\",   lead_time        = seq(0, 23),   file_path        = url,    file_template    = template,    file_format      = \"netcdf\",   file_format_opts = file_opts,   param_defs       = my_params,    return_data      = TRUE  ) #> Reading https://thredds.met.no/thredds/dodsC/meps25epsarchive/2024/05/27/meps_det_sfc_20240527T00Z.ncml"},{"path":"https://harphub.github.io/harpTobac/articles/tracking_model_OLR.html","id":"feature-detction","dir":"Articles","previous_headings":"","what":"Feature detction","title":"Track OLR features","text":"Feature detection done using thresholds identify contiguous features field interest time. requires careful selection thresholds, first step plot OLR time step.  looks like interesting features OLR < ~180. can get better idea masking values > 180, adding limits colour scale.  Using information use thresholds 180, 160 140 feature detection, setting target “min” since want features identified less thresholds. Features detected using detect_features_multithreshold() wrapper around tobac.feature_detection.feature_detection_multithreshold original Python package. detect features least 16 contiguous pixels size, use “weighted_diff” method set position features. can now plot feature locations threshold time.","code":"countries <- get_map(get_domain(olr$fcst), polygon = FALSE) ggplot() +    geom_georaster(     aes(geofield = fcst), olr,      upscale_factor = 8, upscale_method = \"downsample\"   ) +    geom_path(aes(x, y), countries, colour = \"grey30\") +   facet_wrap(~valid_dttm) +   scale_fill_viridis_c(bquote(OLR~\"[\"*W.m^{-2}*\"]\"), direction = -1) +    coord_equal(expand = FALSE) +   theme_harp_map() countries <- get_map(get_domain(olr$fcst), polygon = FALSE) ggplot() +    geom_georaster(     aes(geofield = fcst), olr,      upscale_factor = 8, upscale_method = \"downsample\"   ) +    geom_path(aes(x, y), countries, colour = \"grey30\") +   facet_wrap(~valid_dttm) +   scale_fill_viridis_c(     bquote(OLR~\"[\"*W.m^{-2}*\"]\"), direction = -1,      limits = c(NA, 180), na.value = \"white\"   ) +    coord_equal(expand = FALSE) +   theme_harp_map() features <- detect_features_multithreshold(   olr,    thresholds         = c(180, 160, 140),   data_col           = fcst,   target             = \"min\",   n_min_threshold    = 16,    position_threshold = \"weighted_diff\" ) ggplot(features, aes(projection_x_coordinate, projection_y_coordinate)) +   geom_path(aes(x, y), countries, colour = \"grey30\") +    geom_point(aes(colour = factor(threshold_value))) +   facet_wrap(~timestr) +   coord_equal(expand = FALSE) +    theme_harp_map() +    labs(colour = bquote(atop(OLR~Threshold,\"[\"*W.m^{-2}*\"]\")))"},{"path":"https://harphub.github.io/harpTobac/articles/tracking_model_OLR.html","id":"segmentation","dir":"Articles","previous_headings":"","what":"Segmentation","title":"Track OLR features","text":"run feature detection, next step associate regions identified features. done using segment_2d() wrapper around tobac.segmentation.segmentation_2D function original Python package. single threshold needed, use highest thresholds used feature detection. segment_2d returns named list, can destructure using %<-% operator zeallot package. segments data frame geolist coloumn contains fields mask identifying areas associated feature, features output previous step, extra column giving number cells associated feature. segment masks can overlayed top original OLR data. just show 4 times.","code":"library(zeallot) c(segments, features) %<-% segment_2d(   features,    olr,    threshold = 180,    data_col  = fcst,    target    = \"min\" ) ggplot() +    geom_georaster(     aes(geofield = fcst), olr[11:14, ],      upscale_factor = 4, upscale_method = \"downsample\"   ) +   geom_geocontour(     aes(geofield = segmentation_mask), segments[11:14, ],     colour = \"red\"   ) +    geom_path(aes(x, y), countries, colour = \"grey30\") +   facet_wrap(~valid_dttm) +   scale_fill_viridis_c(direction = -1) +   coord_equal(expand = FALSE) +   theme_harp_map()"},{"path":"https://harphub.github.io/harpTobac/articles/tracking_model_OLR.html","id":"tracking","dir":"Articles","previous_headings":"","what":"Tracking","title":"Track OLR features","text":"features identified, tracking algorithm attempts link features time produce tracks. tracking computed link_tracks() function wrapper around tobac.tracking.linking_trackpy original Python package. arguments call link_tracks() require experimentation, better explained tobac examples. tracks identified cells can easily plotted. tracks throughout period can done making sure remove untracked cells (labelled -1).  plot statistics, distribution lifetimes individual cells.","code":"tracks <- link_tracks(   features,    olr,    data_col        = fcst,    v_max           = 20,    stubs           = 2,     subnetwork_size = 100,    adaptive_step   = 0.95,    adaptive_stop   = 0.2 ) library(dplyr) countries <- get_map(get_domain(olr$fcst)) ggplot(filter(tracks, cell > -1), aes(x, y)) +    geom_polygon(aes(group = group), countries, fill = \"grey\", colour = \"grey30\") +   geom_path(     aes(group = factor(cell), colour = factor(threshold_value)),     arrow = arrow(type = \"open\", angle = 30, length = unit(0.1, \"cm\"))   ) +   labs(colour = bquote(atop(OLR~threshold, \"[\"*W.m^{-2}*\"]\"))) +   coord_equal(expand = FALSE) +    theme_harp_map() ggplot(   summarise(     filter(tracks, cell > -1),     lifetime = max(time_cell) / 3600,      .by      = cell   ) ) +   geom_bar(aes(x = factor(lifetime)), fill = \"steelblue\") +    labs(x = \"Cell lifetime [h]\")"},{"path":"https://harphub.github.io/harpTobac/articles/tracking_model_OLR.html","id":"epilogue","dir":"Articles","previous_headings":"","what":"Epilogue","title":"Track OLR features","text":"many analysis possibilities data. addition harpTobac package gives access functionality Python tobac package via tobac$<module name>$<function>.","code":""},{"path":"https://harphub.github.io/harpTobac/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Singleton. Author, maintainer. Juan-Jesus Gonzalez. Author.","code":""},{"path":"https://harphub.github.io/harpTobac/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Singleton , Gonzalez J (2024). harpTobac: harp bindings Python tobac package. R package version 0.1.0, https://harphub.github.io/harpTobac/, https://github.com/harphub/harpTobac.","code":"@Manual{,   title = {harpTobac: harp bindings for the Python tobac package},   author = {Andrew Singleton and Juan-Jesus Gonzalez},   year = {2024},   note = {R package version 0.1.0, https://harphub.github.io/harpTobac/},   url = {https://github.com/harphub/harpTobac}, }"},{"path":"https://harphub.github.io/harpTobac/index.html","id":"harptobac","dir":"","previous_headings":"","what":"harp bindings for the Python tobac package","title":"harp bindings for the Python tobac package","text":"harpTobac interface Python package, tobac, tracking object based analysis clouds. currently enables pass harp_grid_df data frames basic analysis tracking 2d fields. , feature detection 2d, segmentation 2d 2d linking features tracks. Currently specific functions visualisation written, outputs basic data frames harp_grid_df data frames can easily visualised using ggplot2 harpVis geoms.","code":""},{"path":"https://harphub.github.io/harpTobac/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"harp bindings for the Python tobac package","text":"can install harpTobac Github like : installed harpTobac need install tobac Python package. done using install_tobac() function. necessary packages installed virtualenv called “harp-py”. Python packages can used harp installed run . already “harp-py” virtualenv asked want remove prior installation. Typically answer , otherwise harp Python packages removed. need , straight installing harpTobac. Subsequently, harpTobac package attached session use “harp-py” virtualenv.","code":"if (!requireNamespace(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"harphub/harpTobac\") library(harpTobac) install_tobac()"},{"path":"https://harphub.github.io/harpTobac/reference/detect_features_multithreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"harp wrapper for the tobac feature_detection_multithreshold() function — detect_features_multithreshold","title":"harp wrapper for the tobac feature_detection_multithreshold() function — detect_features_multithreshold","text":"function used detect features field based contiguous regions. regions / threshold depending value target argument. Note 3d features yet implemented wrapper.","code":""},{"path":"https://harphub.github.io/harpTobac/reference/detect_features_multithreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"harp wrapper for the tobac feature_detection_multithreshold() function — detect_features_multithreshold","text":"","code":"detect_features_multithreshold(   field_data,   thresholds,   data_col = \"gridded_data\",   dttm_col = \"valid_dttm\",   target = c(\"max\", \"min\"),   position_threshold = c(\"centre\", \"extreme\", \"weighted_diff\", \"weighted_abs\"),   sigma_threshold = 0.5,   n_erosion_threshold = 0,   n_min_threshold = 0,   min_distance = 0,   feature_number_start = 1,   pbc_flag = c(\"none\", \"h_dim1\", \"h_dim2\", \"both\"),   vertical_coord = NULL,   vertical_axis = NULL,   detect_subset = NULL,   wavelength_filtering = NULL,   dz = NULL,   strict_thresholding = FALSE )"},{"path":"https://harphub.github.io/harpTobac/reference/detect_features_multithreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"harp wrapper for the tobac feature_detection_multithreshold() function — detect_features_multithreshold","text":"field_data harp_grid_df data frame one returned harpIO functions harpIO::read_grid() data_frame = TRUE, harpIO::read_forecast(), harpIO::read_analysis(). thresholds Threshold values used select target regions track. feature detection inclusive threshold value(s), .e. values greater/less equal included target region. target argument controls whether detection based less greater threshold(s). data_col <tidy-select> column field_data containing fields used detect features . <geolist> column. named column found field_data, field_data contains 1 <geolist> column, <geolist> column used. dttm_col <tidy-select> column field_data containing date-times used time dimension. Can numeric units Unix time (seconds since 1970-01-01 00:00:00), <POSIXt>column. named column found field_data, field_data contains 1 <POSIXt> column, <POSIXt> column used. target Flag determine tracking targeting minima maxima data. \"max\" \"min\". Default \"max\". position_threshold Flag choose method used setting position tracked feature. Can one \"centre\", \"extreme\", \"weighted_diff\". Default ‘centre’, though \"weighted_diff\" often preferable atmospheric features. sigma_threshold Standard deviation initial filtering step. Default 0.5. n_erosion_threshold Number pixels erode identified features. Default 0. n_min_threshold Minimum number identified contiguous pixels feature detected. Default 0. min_distance Minimum distance detected features (metres). Default 0. feature_number_start Feature id start . Default 1. pbc_flag Sets whether use periodic boundaries, directions. \"none\" means periodic boundaries \"hdim_1\" means periodic along hdim1, \"hdim_2\" means periodic along hdim2 \"\" means periodic along horizontal dimensions vertical_coord Name vertical coordinate. NULL, tries auto-detect. looks coordinate dimension name corresponding string. vertical_axis vertical axis number data. NULL, uses vertical_coord determine axis. must >=0. detect_subset Whether run feature detection subset data. NULL, named list subset grid run feature detection range specified axis specified. format list : list(axis-number = c(start, end)), axis-number number axis subset, start inclusive, end exclusive. example, data oriented (time, z, y, x) want detect values z levels 10 29, set: list(\"1\" = c(10, 30)). Note tested. wavelength_filtering Minimum maximum wavelength horizontal spectral filtering metres 2 element vector. Default NULL. dz Constant vertical grid spacing (metres). specified input 3D, function requires altitude available features input. specify value , function assumes constant z spacing points, even z_coordinate_name specified. strict_thresholding TRUE, feature can detected previous thresholds met. Default FALSE.","code":""},{"path":"https://harphub.github.io/harpTobac/reference/detect_features_multithreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"harp wrapper for the tobac feature_detection_multithreshold() function — detect_features_multithreshold","text":"data frame detected features.","code":""},{"path":"https://harphub.github.io/harpTobac/reference/install_tobac.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Tobac — install_tobac","title":"Install Tobac — install_tobac","text":"install_tobac() installs Python modules needed run Tobac functions. packages installed virtualenv, default named \"harp-py\". virtual environment default virtual environment harp related Python modules installed. already \"harp-py\" virtualenv, asked want remove virtualenv prior installation. Typically answer .","code":""},{"path":"https://harphub.github.io/harpTobac/reference/install_tobac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Tobac — install_tobac","text":"","code":"install_tobac(envname = \"harp-py\", new_env = identical(envname, \"harp-py\"))"},{"path":"https://harphub.github.io/harpTobac/reference/install_tobac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Tobac — install_tobac","text":"envname virtual environment install tobac Python modules. Default \"harp-py\". new_env Whether start new environment removing envname already exists. defulat TRUE envname already exists, prompted want remove virtualenv envname.","code":""},{"path":"https://harphub.github.io/harpTobac/reference/link_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"harp wrapper to the tobac function tracking.linking_trackpy(). — link_tracks","title":"harp wrapper to the tobac function tracking.linking_trackpy(). — link_tracks","text":"harp wrapper tobac function tracking.linking_trackpy().","code":""},{"path":"https://harphub.github.io/harpTobac/reference/link_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"harp wrapper to the tobac function tracking.linking_trackpy(). — link_tracks","text":"","code":"link_tracks(   features,   field_data,   dz = NULL,   data_col = \"gridded_data\",   dttm_col = \"valid_dttm\",   d_max = NULL,   subnetwork_size = NULL,   v_max = NULL,   memory = 0,   stubs = 1,   time_cell_min = NULL,   order = 1,   extrapolate = 0,   method_linking = c(\"predict\", \"random\"),   adaptive_step = NULL,   adaptive_stop = NULL,   cell_number_start = 1,   cell_number_unassigned = -1,   vertical_coord = NULL,   min_h1 = NULL,   max_h1 = NULL,   min_h2 = NULL,   max_h2 = NULL,   pbc_flag = c(\"none\", \"hdim_1\", \"hdim_2\", \"both\") )"},{"path":"https://harphub.github.io/harpTobac/reference/link_tracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"harp wrapper to the tobac function tracking.linking_trackpy(). — link_tracks","text":"features features data frame returned detect_features_multithreshold() segment_2d() field_data harp_grid_df data frame one returned harpIO functions harpIO::read_grid() data_frame = TRUE, harpIO::read_forecast(), harpIO::read_analysis(). dz Constant vertical grid spacing (meters), optional. specified input 3D, function requires vertical_coord available features input. specify value , function assumes constant z spacing points, even vertical_coord specified. data_col <tidy-select> column field_data containing fields used detect features . <geolist> column. named column found field_data, field_data contains 1 <geolist> column, <geolist> column used. dttm_col <tidy-select> column field_data containing date-times used time dimension. Can numeric units Unix time (seconds since 1970-01-01 00:00:00), <POSIXt>column. named column found field_data, field_data contains 1 <POSIXt> column, <POSIXt> column used. d_max Maximum search range metres. one d_max, v_max can set. Default NULL. subnetwork_size Maximum size subnetwork linking. parameter adjusted using adaptive search. Usually lower value desired case. depth explanation look . NULL, 30 used regular search 15 adaptive search. Default NULL. v_max Speed features allowed move m/s. one d_max v_max can set. Default NULL. memory Number output timesteps features allowed vanish still considered tracked. Default 0. Warning :: parameter used caution, can lead erroneous trajectory linking, espacially data low time resolution. stubs Minimum number timesteps tracked cell reported. Default 1 time_cell_min Minimum length time cell must tracked considered valid cell seconds. Default NULL. order Order polynomial used extrapolate trajectory gaps start end point. Default 1. extrapolate Number timesteps extrapolate trajectories. Currently unused. Default 0. method_linking Flag choosing method used trajectory linking. Can \"predict\" \"random\". Default ‘predict’. Note: default tobac \"random\" though typically encourage users use ‘predict’. adaptive_step Reduce search range multiplying factor. Needs used combination adaptive_stop. Default NULL. adaptive_stop NULL, encountering oversize subnet, retry progressively reducing search_rangeby multiplying withadaptive_stepuntil subnet solvable. search_range becomes <=adaptive_stop, give raise SubnetOversizeException. Needs used combination adaptive_step. Default NULL`. cell_number_start Cell number first tracked cell. Default 1. cell_number_unassigned Number set unassigned/non-tracked cells . Default -1. vertical_coord Name vertical coordinate. vertical coordinate used must metres. NULL, tries auto-detect. looks coordinate dimension name corresponding string. use dz, set NULL`. min_h1 Minimum hdim_1 value, required pbc_flag \"hdim_1\" \"\". max_h1 Maximum hdim_1 value, required pbc_flag \"hdim_1\" \"\". min_h2 Minimum hdim_2 value, required pbc_flag \"hdim_2\" \"\". max_h2 Maximum hdim_2 value, required pbc_flag \"hdim_2\" \"\". pbc_flag Sets whether use periodic boundaries, directions. \"none\" means periodic boundaries \"hdim_1\" means periodic along hdim1, \"hdim_2\" means periodic along hdim2 \"\" means periodic along horizontal dimensions","code":""},{"path":"https://harphub.github.io/harpTobac/reference/link_tracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"harp wrapper to the tobac function tracking.linking_trackpy(). — link_tracks","text":"Data frame linked features, containing column \"cell\", integers indicating affiliation feature specific track, variable \"time_cell\" time, seconds' cell already existed.","code":""},{"path":"https://harphub.github.io/harpTobac/reference/segment_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"harp wrapper for tobac segmentation.segmentation_2d() function — segment_2d","title":"harp wrapper for tobac segmentation.segmentation_2d() function — segment_2d","text":"harp wrapper tobac segmentation.segmentation_2d() function","code":""},{"path":"https://harphub.github.io/harpTobac/reference/segment_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"harp wrapper for tobac segmentation.segmentation_2d() function — segment_2d","text":"","code":"segment_2d(   features,   field_data,   threshold,   data_col = \"gridded_data\",   dttm_col = \"valid_dttm\",   target = c(\"max\", \"min\"),   level = NULL,   method = \"watershed\",   max_distance = NULL,   pbc_flag = c(\"none\", \"h_dim1\", \"h_dim2\", \"both\"),   seed_3d_flag = c(\"column\", \"box\"),   statistic = NULL )"},{"path":"https://harphub.github.io/harpTobac/reference/segment_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"harp wrapper for tobac segmentation.segmentation_2d() function — segment_2d","text":"features features data frame, returned detect_features_multithreshold(). field_data harp_grid_df data frame one returned harpIO functions harpIO::read_grid() data_frame = TRUE, harpIO::read_forecast(), harpIO::read_analysis(). threshold Threshold watershedding field used mask. data_col <tidy-select> column field_data containing fields used detect features . <geolist> column. named column found field_data, field_data contains 1 <geolist> column, <geolist> column used. dttm_col <tidy-select> column field_data containing date-times used time dimension. Can numeric units Unix time (seconds since 1970-01-01 00:00:00), <POSIXt>column. named column found field_data, field_data contains 1 <POSIXt> column, <POSIXt> column used. target Flag determine tracking targeting minima maxima data. \"max\" \"min\". Default \"max\". level Levels seed cells watershedding algorithm. Default NULL. method Flag determining algorithm use (currently \"watershed\" implemented). max_distance Maximum distance marker allowed classified belonging cell metres. Default NULL. pbc_flag Sets whether use periodic boundaries, directions. \"none\" means periodic boundaries \"hdim_1\" means periodic along hdim1, \"hdim_2\" means periodic along hdim2 \"\" means periodic along horizontal dimensions seed_3d_flag Seed 3D field feature positions either full column (default) box user-set size. statistic Default NULL. Parameter calculate bulk statistics within feature detection. Named list callable function(s) apply region detected feature name statistics appear feature output data frame. functions values names metric keys (e.g. list(mean = np.mean)). probably work yet needs translation R Python functions .","code":""},{"path":"https://harphub.github.io/harpTobac/reference/segment_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"harp wrapper for tobac segmentation.segmentation_2d() function — segment_2d","text":"named list : segments: data frame geolist column 2d fields domain input data integer values denoting segment. features: Feature data frame including number cells segmented area feature time step.","code":""},{"path":"https://harphub.github.io/harpTobac/reference/toabc.html","id":null,"dir":"Reference","previous_headings":"","what":"Main tobac module — toabc","title":"Main tobac module — toabc","text":"Interface main Tobac module. Provides access top level functions well sub-modules using $ instead . Python.","code":""},{"path":"https://harphub.github.io/harpTobac/reference/toabc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main tobac module — toabc","text":"","code":"toabc"},{"path":"https://harphub.github.io/harpTobac/reference/toabc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Main tobac module — toabc","text":"Tobac module","code":""},{"path":"https://harphub.github.io/harpTobac/reference/toabc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main tobac module — toabc","text":"","code":"if (FALSE) { library(tobac)  tobac$sys$api_version }"}]
